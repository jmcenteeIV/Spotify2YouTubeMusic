"""
This type stub file was generated by pyright.
"""

""" A simple and thin Python library for the Spotify Web API """
__all__ = ["Spotify", "SpotifyException"]
logger = ...
class Spotify:
    """
        Example usage::

            import spotipy

            urn = 'spotify:artist:3jOstUTkEu2JkjvRdBA5Gu'
            sp = spotipy.Spotify()

            artist = sp.artist(urn)
            print(artist)

            user = sp.user('plamere')
            print(user)
    """
    max_retries = ...
    default_retry_codes = ...
    country_codes = ...
    def __init__(self, auth=..., requests_session=..., client_credentials_manager=..., oauth_manager=..., auth_manager=..., proxies=..., requests_timeout=..., status_forcelist=..., retries=..., status_retries=..., backoff_factor=..., language=...) -> None:
        """
        Creates a Spotify API client.

        :param auth: An access token (optional)
        :param requests_session:
            A Requests session object or a truthy value to create one.
            A falsy value disables sessions.
            It should generally be a good idea to keep sessions enabled
            for performance reasons (connection pooling).
        :param client_credentials_manager:
            SpotifyClientCredentials object
        :param oauth_manager:
            SpotifyOAuth object
        :param auth_manager:
            SpotifyOauth, SpotifyClientCredentials,
            or SpotifyImplicitGrant object
        :param proxies:
            Definition of proxies (optional).
            See Requests doc https://2.python-requests.org/en/master/user/advanced/#proxies
        :param requests_timeout:
            Tell Requests to stop waiting for a response after a given
            number of seconds
        :param status_forcelist:
            Tell requests what type of status codes retries should occur on
        :param retries:
            Total number of retries to allow
        :param status_retries:
            Number of times to retry on bad status codes
        :param backoff_factor:
            A backoff factor to apply between attempts after the second try
            See urllib3 https://urllib3.readthedocs.io/en/latest/reference/urllib3.util.html
        :param language:
            The language parameter advertises what language the user prefers to see.
            See ISO-639 language code: https://www.loc.gov/standards/iso639-2/php/code_list.php
        """
        ...
    
    def set_auth(self, auth): # -> None:
        ...
    
    @property
    def auth_manager(self):
        ...
    
    @auth_manager.setter
    def auth_manager(self, auth_manager): # -> None:
        ...
    
    def __del__(self): # -> None:
        """Make sure the connection (pool) gets closed"""
        ...
    
    def next(self, result): # -> Any | None:
        """ returns the next result given a paged result

            Parameters:
                - result - a previously returned paged result
        """
        ...
    
    def previous(self, result): # -> Any | None:
        """ returns the previous result given a paged result

            Parameters:
                - result - a previously returned paged result
        """
        ...
    
    def track(self, track_id, market=...): # -> Any | None:
        """ returns a single track given the track's ID, URI or URL

            Parameters:
                - track_id - a spotify URI, URL or ID
                - market - an ISO 3166-1 alpha-2 country code.
        """
        ...
    
    def tracks(self, tracks, market=...): # -> Any | None:
        """ returns a list of tracks given a list of track IDs, URIs, or URLs

            Parameters:
                - tracks - a list of spotify URIs, URLs or IDs. Maximum: 50 IDs.
                - market - an ISO 3166-1 alpha-2 country code.
        """
        ...
    
    def artist(self, artist_id): # -> Any | None:
        """ returns a single artist given the artist's ID, URI or URL

            Parameters:
                - artist_id - an artist ID, URI or URL
        """
        ...
    
    def artists(self, artists): # -> Any | None:
        """ returns a list of artists given the artist IDs, URIs, or URLs

            Parameters:
                - artists - a list of  artist IDs, URIs or URLs
        """
        ...
    
    def artist_albums(self, artist_id, album_type=..., country=..., limit=..., offset=...): # -> Any | None:
        """ Get Spotify catalog information about an artist's albums

            Parameters:
                - artist_id - the artist ID, URI or URL
                - album_type - 'album', 'single', 'appears_on', 'compilation'
                - country - limit the response to one particular country.
                - limit  - the number of albums to return
                - offset - the index of the first album to return
        """
        ...
    
    def artist_top_tracks(self, artist_id, country=...): # -> Any | None:
        """ Get Spotify catalog information about an artist's top 10 tracks
            by country.

            Parameters:
                - artist_id - the artist ID, URI or URL
                - country - limit the response to one particular country.
        """
        ...
    
    def artist_related_artists(self, artist_id): # -> Any | None:
        """ Get Spotify catalog information about artists similar to an
            identified artist. Similarity is based on analysis of the
            Spotify community's listening history.

            Parameters:
                - artist_id - the artist ID, URI or URL
        """
        ...
    
    def album(self, album_id): # -> Any | None:
        """ returns a single album given the album's ID, URIs or URL

            Parameters:
                - album_id - the album ID, URI or URL
        """
        ...
    
    def album_tracks(self, album_id, limit=..., offset=..., market=...): # -> Any | None:
        """ Get Spotify catalog information about an album's tracks

            Parameters:
                - album_id - the album ID, URI or URL
                - limit  - the number of items to return
                - offset - the index of the first item to return
                - market - an ISO 3166-1 alpha-2 country code.

        """
        ...
    
    def albums(self, albums): # -> Any | None:
        """ returns a list of albums given the album IDs, URIs, or URLs

            Parameters:
                - albums - a list of  album IDs, URIs or URLs
        """
        ...
    
    def show(self, show_id, market=...): # -> Any | None:
        """ returns a single show given the show's ID, URIs or URL

            Parameters:
                - show_id - the show ID, URI or URL
                - market - an ISO 3166-1 alpha-2 country code.
                           The show must be available in the given market.
                           If user-based authorization is in use, the user's country
                           takes precedence. If neither market nor user country are
                           provided, the content is considered unavailable for the client.
        """
        ...
    
    def shows(self, shows, market=...): # -> Any | None:
        """ returns a list of shows given the show IDs, URIs, or URLs

            Parameters:
                - shows - a list of show IDs, URIs or URLs
                - market - an ISO 3166-1 alpha-2 country code.
                           Only shows available in the given market will be returned.
                           If user-based authorization is in use, the user's country
                           takes precedence. If neither market nor user country are
                           provided, the content is considered unavailable for the client.
        """
        ...
    
    def show_episodes(self, show_id, limit=..., offset=..., market=...): # -> Any | None:
        """ Get Spotify catalog information about a show's episodes

            Parameters:
                - show_id - the show ID, URI or URL
                - limit  - the number of items to return
                - offset - the index of the first item to return
                - market - an ISO 3166-1 alpha-2 country code.
                           Only episodes available in the given market will be returned.
                           If user-based authorization is in use, the user's country
                           takes precedence. If neither market nor user country are
                           provided, the content is considered unavailable for the client.
        """
        ...
    
    def episode(self, episode_id, market=...): # -> Any | None:
        """ returns a single episode given the episode's ID, URIs or URL

            Parameters:
                - episode_id - the episode ID, URI or URL
                - market - an ISO 3166-1 alpha-2 country code.
                           The episode must be available in the given market.
                           If user-based authorization is in use, the user's country
                           takes precedence. If neither market nor user country are
                           provided, the content is considered unavailable for the client.
        """
        ...
    
    def episodes(self, episodes, market=...): # -> Any | None:
        """ returns a list of episodes given the episode IDs, URIs, or URLs

            Parameters:
                - episodes - a list of episode IDs, URIs or URLs
                - market - an ISO 3166-1 alpha-2 country code.
                           Only episodes available in the given market will be returned.
                           If user-based authorization is in use, the user's country
                           takes precedence. If neither market nor user country are
                           provided, the content is considered unavailable for the client.
        """
        ...
    
    def search(self, q, limit=..., offset=..., type=..., market=...): # -> Any | None:
        """ searches for an item

            Parameters:
                - q - the search query (see how to write a query in the
                      official documentation https://developer.spotify.com/documentation/web-api/reference/search/)  # noqa
                - limit - the number of items to return (min = 1, default = 10, max = 50). The limit is applied
                          within each type, not on the total response.
                - offset - the index of the first item to return
                - type - the types of items to return. One or more of 'artist', 'album',
                         'track', 'playlist', 'show', and 'episode'.  If multiple types are desired,
                         pass in a comma separated string; e.g., 'track,album,episode'.
                - market - An ISO 3166-1 alpha-2 country code or the string
                           from_token.
        """
        ...
    
    def search_markets(self, q, limit=..., offset=..., type=..., markets=..., total=...): # -> dict[Unknown, Unknown]:
        """ (experimental) Searches multiple markets for an item

            Parameters:
                - q - the search query (see how to write a query in the
                      official documentation https://developer.spotify.com/documentation/web-api/reference/search/)  # noqa
                - limit  - the number of items to return (min = 1, default = 10, max = 50). If a search is to be done on multiple
                            markets, then this limit is applied to each market. (e.g. search US, CA, MX each with a limit of 10).
                - offset - the index of the first item to return
                - type - the types of items to return. One or more of 'artist', 'album',
                         'track', 'playlist', 'show', or 'episode'. If multiple types are desired, pass in a comma separated string.
                - markets - A list of ISO 3166-1 alpha-2 country codes. Search all country markets by default.
                - total - the total number of results to return if multiple markets are supplied in the search.
                          If multiple types are specified, this only applies to the first type.
        """
        ...
    
    def user(self, user): # -> Any | None:
        """ Gets basic profile information about a Spotify User

            Parameters:
                - user - the id of the usr
        """
        ...
    
    def current_user_playlists(self, limit=..., offset=...): # -> Any | None:
        """ Get current user playlists without required getting his profile
            Parameters:
                - limit  - the number of items to return
                - offset - the index of the first item to return
        """
        ...
    
    def playlist(self, playlist_id, fields=..., market=..., additional_types=...): # -> Any | None:
        """ Gets playlist by id.

            Parameters:
                - playlist - the id of the playlist
                - fields - which fields to return
                - market - An ISO 3166-1 alpha-2 country code or the
                           string from_token.
                - additional_types - list of item types to return.
                                     valid types are: track and episode
        """
        ...
    
    def playlist_tracks(self, playlist_id, fields=..., limit=..., offset=..., market=..., additional_types=...): # -> Any | None:
        """ Get full details of the tracks of a playlist.

            Parameters:
                - playlist_id - the id of the playlist
                - fields - which fields to return
                - limit - the maximum number of tracks to return
                - offset - the index of the first track to return
                - market - an ISO 3166-1 alpha-2 country code.
                - additional_types - list of item types to return.
                                     valid types are: track and episode
        """
        ...
    
    def playlist_items(self, playlist_id, fields=..., limit=..., offset=..., market=..., additional_types=...): # -> Any | None:
        """ Get full details of the tracks and episodes of a playlist.

            Parameters:
                - playlist_id - the id of the playlist
                - fields - which fields to return
                - limit - the maximum number of tracks to return
                - offset - the index of the first track to return
                - market - an ISO 3166-1 alpha-2 country code.
                - additional_types - list of item types to return.
                                     valid types are: track and episode
        """
        ...
    
    def playlist_cover_image(self, playlist_id): # -> Any | None:
        """ Get cover of a playlist.

            Parameters:
                - playlist_id - the id of the playlist
        """
        ...
    
    def playlist_upload_cover_image(self, playlist_id, image_b64): # -> Any | None:
        """ Replace the image used to represent a specific playlist

            Parameters:
                - playlist_id - the id of the playlist
                - image_b64 - image data as a Base64 encoded JPEG image string
                    (maximum payload size is 256 KB)
        """
        ...
    
    def user_playlist(self, user, playlist_id=..., fields=..., market=...): # -> Any | None:
        ...
    
    def user_playlist_tracks(self, user=..., playlist_id=..., fields=..., limit=..., offset=..., market=...): # -> Any | None:
        ...
    
    def user_playlists(self, user, limit=..., offset=...): # -> Any | None:
        """ Gets playlists of a user

            Parameters:
                - user - the id of the usr
                - limit  - the number of items to return
                - offset - the index of the first item to return
        """
        ...
    
    def user_playlist_create(self, user, name, public=..., collaborative=..., description=...): # -> Any | None:
        """ Creates a playlist for a user

            Parameters:
                - user - the id of the user
                - name - the name of the playlist
                - public - is the created playlist public
                - collaborative - is the created playlist collaborative
                - description - the description of the playlist
        """
        ...
    
    def user_playlist_change_details(self, user, playlist_id, name=..., public=..., collaborative=..., description=...): # -> Any | None:
        ...
    
    def user_playlist_unfollow(self, user, playlist_id): # -> Any | None:
        """ Unfollows (deletes) a playlist for a user

            Parameters:
                - user - the id of the user
                - name - the name of the playlist
        """
        ...
    
    def user_playlist_add_tracks(self, user, playlist_id, tracks, position=...): # -> Any | None:
        ...
    
    def user_playlist_replace_tracks(self, user, playlist_id, tracks): # -> Any | None:
        """ Replace all tracks in a playlist

            Parameters:
                - user - the id of the user
                - playlist_id - the id of the playlist
                - tracks - the list of track ids to add to the playlist
        """
        ...
    
    def user_playlist_reorder_tracks(self, user, playlist_id, range_start, insert_before, range_length=..., snapshot_id=...): # -> Any | None:
        """ Reorder tracks in a playlist

            Parameters:
                - user - the id of the user
                - playlist_id - the id of the playlist
                - range_start - the position of the first track to be reordered
                - range_length - optional the number of tracks to be reordered
                                 (default: 1)
                - insert_before - the position where the tracks should be
                                  inserted
                - snapshot_id - optional playlist's snapshot ID
        """
        ...
    
    def user_playlist_remove_all_occurrences_of_tracks(self, user, playlist_id, tracks, snapshot_id=...): # -> Any | None:
        """ Removes all occurrences of the given tracks from the given playlist

            Parameters:
                - user - the id of the user
                - playlist_id - the id of the playlist
                - tracks - the list of track ids to remove from the playlist
                - snapshot_id - optional id of the playlist snapshot

        """
        ...
    
    def user_playlist_remove_specific_occurrences_of_tracks(self, user, playlist_id, tracks, snapshot_id=...): # -> Any | None:
        """ Removes all occurrences of the given tracks from the given playlist

            Parameters:
                - user - the id of the user
                - playlist_id - the id of the playlist
                - tracks - an array of objects containing Spotify URIs of the
                    tracks to remove with their current positions in the
                    playlist.  For example:
                        [  { "uri":"4iV5W9uYEdYUVa79Axb7Rh", "positions":[2] },
                        { "uri":"1301WleyT98MSxVHPZCA6M", "positions":[7] } ]
                - snapshot_id - optional id of the playlist snapshot
        """
        ...
    
    def user_playlist_follow_playlist(self, playlist_owner_id, playlist_id): # -> Any | None:
        """
        Add the current authenticated user as a follower of a playlist.

        Parameters:
            - playlist_owner_id - the user id of the playlist owner
            - playlist_id - the id of the playlist

        """
        ...
    
    def user_playlist_is_following(self, playlist_owner_id, playlist_id, user_ids): # -> Any | None:
        """
        Check to see if the given users are following the given playlist

        Parameters:
            - playlist_owner_id - the user id of the playlist owner
            - playlist_id - the id of the playlist
            - user_ids - the ids of the users that you want to check to see
                if they follow the playlist. Maximum: 5 ids.

        """
        ...
    
    def playlist_change_details(self, playlist_id, name=..., public=..., collaborative=..., description=...): # -> Any | None:
        """ Changes a playlist's name and/or public/private state

            Parameters:
                - playlist_id - the id of the playlist
                - name - optional name of the playlist
                - public - optional is the playlist public
                - collaborative - optional is the playlist collaborative
                - description - optional description of the playlist
        """
        ...
    
    def current_user_unfollow_playlist(self, playlist_id): # -> Any | None:
        """ Unfollows (deletes) a playlist for the current authenticated
            user

            Parameters:
                - name - the name of the playlist
        """
        ...
    
    def playlist_add_items(self, playlist_id, items, position=...): # -> Any | None:
        """ Adds tracks/episodes to a playlist

            Parameters:
                - playlist_id - the id of the playlist
                - items - a list of track/episode URIs, URLs or IDs
                - position - the position to add the tracks
        """
        ...
    
    def playlist_replace_items(self, playlist_id, items): # -> Any | None:
        """ Replace all tracks/episodes in a playlist

            Parameters:
                - playlist_id - the id of the playlist
                - items - list of track/episode ids to comprise playlist
        """
        ...
    
    def playlist_reorder_items(self, playlist_id, range_start, insert_before, range_length=..., snapshot_id=...): # -> Any | None:
        """ Reorder tracks in a playlist

            Parameters:
                - playlist_id - the id of the playlist
                - range_start - the position of the first track to be reordered
                - range_length - optional the number of tracks to be reordered
                                 (default: 1)
                - insert_before - the position where the tracks should be
                                  inserted
                - snapshot_id - optional playlist's snapshot ID
        """
        ...
    
    def playlist_remove_all_occurrences_of_items(self, playlist_id, items, snapshot_id=...): # -> Any | None:
        """ Removes all occurrences of the given tracks from the given playlist

            Parameters:
                - playlist_id - the id of the playlist
                - items - list of track/episode ids to remove from the playlist
                - snapshot_id - optional id of the playlist snapshot

        """
        ...
    
    def playlist_remove_specific_occurrences_of_items(self, playlist_id, items, snapshot_id=...): # -> Any | None:
        """ Removes all occurrences of the given tracks from the given playlist

            Parameters:
                - playlist_id - the id of the playlist
                - items - an array of objects containing Spotify URIs of the
                    tracks/episodes to remove with their current positions in
                    the playlist.  For example:
                        [  { "uri":"4iV5W9uYEdYUVa79Axb7Rh", "positions":[2] },
                        { "uri":"1301WleyT98MSxVHPZCA6M", "positions":[7] } ]
                - snapshot_id - optional id of the playlist snapshot
        """
        ...
    
    def current_user_follow_playlist(self, playlist_id): # -> Any | None:
        """
        Add the current authenticated user as a follower of a playlist.

        Parameters:
            - playlist_id - the id of the playlist

        """
        ...
    
    def playlist_is_following(self, playlist_id, user_ids): # -> Any | None:
        """
        Check to see if the given users are following the given playlist

        Parameters:
            - playlist_id - the id of the playlist
            - user_ids - the ids of the users that you want to check to see
                if they follow the playlist. Maximum: 5 ids.

        """
        ...
    
    def me(self): # -> Any | None:
        """ Get detailed profile information about the current user.
            An alias for the 'current_user' method.
        """
        ...
    
    def current_user(self): # -> Any | None:
        """ Get detailed profile information about the current user.
            An alias for the 'me' method.
        """
        ...
    
    def current_user_playing_track(self): # -> Any | None:
        """ Get information about the current users currently playing track.
        """
        ...
    
    def current_user_saved_albums(self, limit=..., offset=..., market=...): # -> Any | None:
        """ Gets a list of the albums saved in the current authorized user's
            "Your Music" library

            Parameters:
                - limit - the number of albums to return (MAX_LIMIT=50)
                - offset - the index of the first album to return
                - market - an ISO 3166-1 alpha-2 country code.

        """
        ...
    
    def current_user_saved_albums_add(self, albums=...): # -> Any | None:
        """ Add one or more albums to the current user's
            "Your Music" library.
            Parameters:
                - albums - a list of album URIs, URLs or IDs
        """
        ...
    
    def current_user_saved_albums_delete(self, albums=...): # -> Any | None:
        """ Remove one or more albums from the current user's
            "Your Music" library.

            Parameters:
                - albums - a list of album URIs, URLs or IDs
        """
        ...
    
    def current_user_saved_albums_contains(self, albums=...): # -> Any | None:
        """ Check if one or more albums is already saved in
            the current Spotify user’s “Your Music” library.

            Parameters:
                - albums - a list of album URIs, URLs or IDs
        """
        ...
    
    def current_user_saved_tracks(self, limit=..., offset=..., market=...): # -> Any | None:
        """ Gets a list of the tracks saved in the current authorized user's
            "Your Music" library

            Parameters:
                - limit - the number of tracks to return
                - offset - the index of the first track to return
                - market - an ISO 3166-1 alpha-2 country code

        """
        ...
    
    def current_user_saved_tracks_add(self, tracks=...): # -> Any | None:
        """ Add one or more tracks to the current user's
            "Your Music" library.

            Parameters:
                - tracks - a list of track URIs, URLs or IDs
        """
        ...
    
    def current_user_saved_tracks_delete(self, tracks=...): # -> Any | None:
        """ Remove one or more tracks from the current user's
            "Your Music" library.

            Parameters:
                - tracks - a list of track URIs, URLs or IDs
        """
        ...
    
    def current_user_saved_tracks_contains(self, tracks=...): # -> Any | None:
        """ Check if one or more tracks is already saved in
            the current Spotify user’s “Your Music” library.

            Parameters:
                - tracks - a list of track URIs, URLs or IDs
        """
        ...
    
    def current_user_saved_episodes(self, limit=..., offset=..., market=...): # -> Any | None:
        """ Gets a list of the episodes saved in the current authorized user's
            "Your Music" library

            Parameters:
                - limit - the number of episodes to return
                - offset - the index of the first episode to return
                - market - an ISO 3166-1 alpha-2 country code

        """
        ...
    
    def current_user_saved_episodes_add(self, episodes=...): # -> Any | None:
        """ Add one or more episodes to the current user's
            "Your Music" library.

            Parameters:
                - episodes - a list of episode URIs, URLs or IDs
        """
        ...
    
    def current_user_saved_episodes_delete(self, episodes=...): # -> Any | None:
        """ Remove one or more episodes from the current user's
            "Your Music" library.

            Parameters:
                - episodes - a list of episode URIs, URLs or IDs
        """
        ...
    
    def current_user_saved_episodes_contains(self, episodes=...): # -> Any | None:
        """ Check if one or more episodes is already saved in
            the current Spotify user’s “Your Music” library.

            Parameters:
                - episodes - a list of episode URIs, URLs or IDs
        """
        ...
    
    def current_user_saved_shows(self, limit=..., offset=..., market=...): # -> Any | None:
        """ Gets a list of the shows saved in the current authorized user's
            "Your Music" library

            Parameters:
                - limit - the number of shows to return
                - offset - the index of the first show to return
                - market - an ISO 3166-1 alpha-2 country code

        """
        ...
    
    def current_user_saved_shows_add(self, shows=...): # -> Any | None:
        """ Add one or more albums to the current user's
            "Your Music" library.
            Parameters:
                - shows - a list of show URIs, URLs or IDs
        """
        ...
    
    def current_user_saved_shows_delete(self, shows=...): # -> Any | None:
        """ Remove one or more shows from the current user's
            "Your Music" library.

            Parameters:
                - shows - a list of show URIs, URLs or IDs
        """
        ...
    
    def current_user_saved_shows_contains(self, shows=...): # -> Any | None:
        """ Check if one or more shows is already saved in
            the current Spotify user’s “Your Music” library.

            Parameters:
                - shows - a list of show URIs, URLs or IDs
        """
        ...
    
    def current_user_followed_artists(self, limit=..., after=...): # -> Any | None:
        """ Gets a list of the artists followed by the current authorized user

            Parameters:
                - limit - the number of artists to return
                - after - the last artist ID retrieved from the previous
                          request

        """
        ...
    
    def current_user_following_artists(self, ids=...): # -> Any | None:
        """ Check if the current user is following certain artists

            Returns list of booleans respective to ids

            Parameters:
                - ids - a list of artist URIs, URLs or IDs
        """
        ...
    
    def current_user_following_users(self, ids=...): # -> Any | None:
        """ Check if the current user is following certain artists

            Returns list of booleans respective to ids

            Parameters:
                - ids - a list of user URIs, URLs or IDs
        """
        ...
    
    def current_user_top_artists(self, limit=..., offset=..., time_range=...): # -> Any | None:
        """ Get the current user's top artists

            Parameters:
                - limit - the number of entities to return
                - offset - the index of the first entity to return
                - time_range - Over what time frame are the affinities computed
                  Valid-values: short_term, medium_term, long_term
        """
        ...
    
    def current_user_top_tracks(self, limit=..., offset=..., time_range=...): # -> Any | None:
        """ Get the current user's top tracks

            Parameters:
                - limit - the number of entities to return
                - offset - the index of the first entity to return
                - time_range - Over what time frame are the affinities computed
                  Valid-values: short_term, medium_term, long_term
        """
        ...
    
    def current_user_recently_played(self, limit=..., after=..., before=...): # -> Any | None:
        """ Get the current user's recently played tracks

            Parameters:
                - limit - the number of entities to return
                - after - unix timestamp in milliseconds. Returns all items
                          after (but not including) this cursor position.
                          Cannot be used if before is specified.
                - before - unix timestamp in milliseconds. Returns all items
                           before (but not including) this cursor position.
                           Cannot be used if after is specified
        """
        ...
    
    def user_follow_artists(self, ids=...): # -> Any | None:
        """ Follow one or more artists
            Parameters:
                - ids - a list of artist IDs
        """
        ...
    
    def user_follow_users(self, ids=...): # -> Any | None:
        """ Follow one or more users
            Parameters:
                - ids - a list of user IDs
        """
        ...
    
    def user_unfollow_artists(self, ids=...): # -> Any | None:
        """ Unfollow one or more artists
            Parameters:
                - ids - a list of artist IDs
        """
        ...
    
    def user_unfollow_users(self, ids=...): # -> Any | None:
        """ Unfollow one or more users
            Parameters:
                - ids - a list of user IDs
        """
        ...
    
    def featured_playlists(self, locale=..., country=..., timestamp=..., limit=..., offset=...): # -> Any | None:
        """ Get a list of Spotify featured playlists

            Parameters:
                - locale - The desired language, consisting of a lowercase ISO
                  639 language code and an uppercase ISO 3166-1 alpha-2 country
                  code, joined by an underscore.

                - country - An ISO 3166-1 alpha-2 country code.

                - timestamp - A timestamp in ISO 8601 format:
                  yyyy-MM-ddTHH:mm:ss. Use this parameter to specify the user's
                  local time to get results tailored for that specific date and
                  time in the day

                - limit - The maximum number of items to return. Default: 20.
                  Minimum: 1. Maximum: 50

                - offset - The index of the first item to return. Default: 0
                  (the first object). Use with limit to get the next set of
                  items.
        """
        ...
    
    def new_releases(self, country=..., limit=..., offset=...): # -> Any | None:
        """ Get a list of new album releases featured in Spotify

            Parameters:
                - country - An ISO 3166-1 alpha-2 country code.

                - limit - The maximum number of items to return. Default: 20.
                  Minimum: 1. Maximum: 50

                - offset - The index of the first item to return. Default: 0
                  (the first object). Use with limit to get the next set of
                  items.
        """
        ...
    
    def category(self, category_id, country=..., locale=...): # -> Any | None:
        """ Get info about a category

            Parameters:
                - category_id - The Spotify category ID for the category.

                - country - An ISO 3166-1 alpha-2 country code.
                - locale - The desired language, consisting of an ISO 639
                  language code and an ISO 3166-1 alpha-2 country code, joined
                  by an underscore.
        """
        ...
    
    def categories(self, country=..., locale=..., limit=..., offset=...): # -> Any | None:
        """ Get a list of categories

            Parameters:
                - country - An ISO 3166-1 alpha-2 country code.
                - locale - The desired language, consisting of an ISO 639
                  language code and an ISO 3166-1 alpha-2 country code, joined
                  by an underscore.

                - limit - The maximum number of items to return. Default: 20.
                  Minimum: 1. Maximum: 50

                - offset - The index of the first item to return. Default: 0
                  (the first object). Use with limit to get the next set of
                  items.
        """
        ...
    
    def category_playlists(self, category_id=..., country=..., limit=..., offset=...): # -> Any | None:
        """ Get a list of playlists for a specific Spotify category

            Parameters:
                - category_id - The Spotify category ID for the category.

                - country - An ISO 3166-1 alpha-2 country code.

                - limit - The maximum number of items to return. Default: 20.
                  Minimum: 1. Maximum: 50

                - offset - The index of the first item to return. Default: 0
                  (the first object). Use with limit to get the next set of
                  items.
        """
        ...
    
    def recommendations(self, seed_artists=..., seed_genres=..., seed_tracks=..., limit=..., country=..., **kwargs):
        """ Get a list of recommended tracks for one to five seeds.
            (at least one of `seed_artists`, `seed_tracks` and `seed_genres`
            are needed)

            Parameters:
                - seed_artists - a list of artist IDs, URIs or URLs
                - seed_tracks - a list of track IDs, URIs or URLs
                - seed_genres - a list of genre names. Available genres for
                                recommendations can be found by calling
                                recommendation_genre_seeds

                - country - An ISO 3166-1 alpha-2 country code. If provided,
                            all results will be playable in this country.

                - limit - The maximum number of items to return. Default: 20.
                          Minimum: 1. Maximum: 100

                - min/max/target_<attribute> - For the tuneable track
                    attributes listed in the documentation, these values
                    provide filters and targeting on results.
        """
        ...
    
    def recommendation_genre_seeds(self): # -> Any | None:
        """ Get a list of genres available for the recommendations function.
        """
        ...
    
    def audio_analysis(self, track_id): # -> Any | None:
        """ Get audio analysis for a track based upon its Spotify ID
            Parameters:
                - track_id - a track URI, URL or ID
        """
        ...
    
    def audio_features(self, tracks=...): # -> Any | None:
        """ Get audio features for one or multiple tracks based upon their Spotify IDs
            Parameters:
                - tracks - a list of track URIs, URLs or IDs, maximum: 100 ids
        """
        ...
    
    def devices(self): # -> Any | None:
        """ Get a list of user's available devices.
        """
        ...
    
    def current_playback(self, market=..., additional_types=...): # -> Any | None:
        """ Get information about user's current playback.

            Parameters:
                - market - an ISO 3166-1 alpha-2 country code.
                - additional_types - `episode` to get podcast track information
        """
        ...
    
    def currently_playing(self, market=..., additional_types=...): # -> Any | None:
        """ Get user's currently playing track.

            Parameters:
                - market - an ISO 3166-1 alpha-2 country code.
                - additional_types - `episode` to get podcast track information
        """
        ...
    
    def transfer_playback(self, device_id, force_play=...): # -> Any | None:
        """ Transfer playback to another device.
            Note that the API accepts a list of device ids, but only
            actually supports one.

            Parameters:
                - device_id - transfer playback to this device
                - force_play - true: after transfer, play. false:
                               keep current state.
        """
        ...
    
    def start_playback(self, device_id=..., context_uri=..., uris=..., offset=..., position_ms=...):
        """ Start or resume user's playback.

            Provide a `context_uri` to start playback or a album,
            artist, or playlist.

            Provide a `uris` list to start playback of one or more
            tracks.

            Provide `offset` as {"position": <int>} or {"uri": "<track uri>"}
            to start playback at a particular offset.

            Parameters:
                - device_id - device target for playback
                - context_uri - spotify context uri to play
                - uris - spotify track uris
                - offset - offset into context by index or track
                - position_ms - (optional) indicates from what position to start playback.
                                Must be a positive number. Passing in a position that is
                                greater than the length of the track will cause the player to
                                start playing the next song.
        """
        ...
    
    def pause_playback(self, device_id=...): # -> Any | None:
        """ Pause user's playback.

            Parameters:
                - device_id - device target for playback
        """
        ...
    
    def next_track(self, device_id=...): # -> Any | None:
        """ Skip user's playback to next track.

            Parameters:
                - device_id - device target for playback
        """
        ...
    
    def previous_track(self, device_id=...): # -> Any | None:
        """ Skip user's playback to previous track.

            Parameters:
                - device_id - device target for playback
        """
        ...
    
    def seek_track(self, position_ms, device_id=...): # -> Any | None:
        """ Seek to position in current track.

            Parameters:
                - position_ms - position in milliseconds to seek to
                - device_id - device target for playback
        """
        ...
    
    def repeat(self, state, device_id=...): # -> None:
        """ Set repeat mode for playback.

            Parameters:
                - state - `track`, `context`, or `off`
                - device_id - device target for playback
        """
        ...
    
    def volume(self, volume_percent, device_id=...): # -> None:
        """ Set playback volume.

            Parameters:
                - volume_percent - volume between 0 and 100
                - device_id - device target for playback
        """
        ...
    
    def shuffle(self, state, device_id=...): # -> None:
        """ Toggle playback shuffling.

            Parameters:
                - state - true or false
                - device_id - device target for playback
        """
        ...
    
    def add_to_queue(self, uri, device_id=...): # -> Any | None:
        """ Adds a song to the end of a user's queue

            If device A is currently playing music and you try to add to the queue
            and pass in the id for device B, you will get a
            'Player command failed: Restriction violated' error
            I therefore reccomend leaving device_id as None so that the active device is targeted

            :param uri: song uri, id, or url
            :param device_id:
                the id of a Spotify device.
                If None, then the active device is used.

        """
        ...
    
    def available_markets(self): # -> Any | None:
        """ Get the list of markets where Spotify is available.
            Returns a list of the countries in which Spotify is available, identified by their
            ISO 3166-1 alpha-2 country code with additional country codes for special territories.
        """
        ...
    


